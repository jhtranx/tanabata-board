{"version":3,"sources":["graphql/mutations.js","graphql/queries.js","aws-exports.js","App.js","serviceWorker.js","index.js"],"names":["createTodo","listTodos","awsmobile","Amplify","configure","awsExports","initialState","name","description","randomColor","brightness","randomChannel","r","s","Math","random","toString","length","styles","container","width","margin","display","flex","flexDirection","justifyContent","padding","input","fontFamily","border","backgroundColor","marginBottom","fontSize","todoName","marginLeft","height","fontWeight","todoDescription","button","color","outline","App","useState","formState","setFormState","todos","setTodos","setInput","key","value","a","API","graphql","graphqlOperation","todoData","data","items","console","log","todo","useEffect","fetchTodos","style","data-tip","data-for","href","id","aria-haspopup","place","type","effect","onChange","event","target","placeholder","onClick","map","index","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.924e2a90.chunk.js","sourcesContent":["/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createTodo = /* GraphQL */ `\n  mutation CreateTodo(\n    $input: CreateTodoInput!\n    $condition: ModelTodoConditionInput\n  ) {\n    createTodo(input: $input, condition: $condition) {\n      id\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateTodo = /* GraphQL */ `\n  mutation UpdateTodo(\n    $input: UpdateTodoInput!\n    $condition: ModelTodoConditionInput\n  ) {\n    updateTodo(input: $input, condition: $condition) {\n      id\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteTodo = /* GraphQL */ `\n  mutation DeleteTodo(\n    $input: DeleteTodoInput!\n    $condition: ModelTodoConditionInput\n  ) {\n    deleteTodo(input: $input, condition: $condition) {\n      id\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getTodo = /* GraphQL */ `\n  query GetTodo($id: ID!) {\n    getTodo(id: $id) {\n      id\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listTodos = /* GraphQL */ `\n  query ListTodos(\n    $filter: ModelTodoFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listTodos(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        name\n        description\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-west-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://2sk4cdnbbvguxagvu4227yx4we.appsync-api.us-west-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-west-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-dmq4ls56hjgynhde4qaedreet4\",\n    \"aws_cognito_identity_pool_id\": \"us-west-2:b5c07ab0-b564-4537-9d0f-328d44a8d49b\",\n    \"aws_cognito_region\": \"us-west-2\",\n    \"aws_user_pools_id\": \"us-west-2_N5Xa0mx42\",\n    \"aws_user_pools_web_client_id\": \"4aprvidqns0upnmdp28s33j2hj\",\n    \"oauth\": {}\n};\n\n\nexport default awsmobile;\n","/* src/App.js */\nimport React, { useEffect, useState } from 'react'\nimport Amplify, { API, graphqlOperation } from 'aws-amplify'\nimport { createTodo } from './graphql/mutations'\nimport { listTodos } from './graphql/queries'\nimport ReactTooltip from 'react-tooltip';\n\nimport awsExports from \"./aws-exports\";\nAmplify.configure(awsExports);\n\nconst initialState = { name: '', description: '' }\n\nconst App = () => {\n  const [formState, setFormState] = useState(initialState)\n  const [todos, setTodos] = useState([])\n\n  useEffect(() => {\n    fetchTodos()\n  }, [])\n\n  function setInput(key, value) {\n    setFormState({ ...formState, [key]: value })\n  }\n\n  async function fetchTodos() {\n    try {\n      const todoData = await API.graphql(graphqlOperation(listTodos))\n      const todos = todoData.data.listTodos.items\n      setTodos(todos)\n    } catch (err) { console.log('error fetching todos') }\n  }\n\n  async function addTodo() {\n    try {\n      if (!formState.name || !formState.description) return\n      const todo = { ...formState }\n      setTodos([...todos, todo])\n      setFormState(initialState)\n      await API.graphql(graphqlOperation(createTodo, {input: todo}))\n    } catch (err) {\n      console.log('error creating todo:', err)\n    }\n  }\n\n  return (\n    <div style={styles.container}>\n      <h2 data-tip data-for='global' href='https://en.wikipedia.org/wiki/Tanabata#Customs'>tanabata board</h2>\n      <ReactTooltip id='global' aria-haspopup='true' place=\"bottom\" type=\"dark\" effect=\"solid\">\n        <p>\"People generally celebrate the Tanabata festival</p> \n        <p>by writing wishes, sometimes in the form of poetry,</p>\n        <p>on tanzaku (短冊, tanzaku), small pieces of paper,</p>\n        <p>and hanging them on bamboo\" (Wikipedia)</p>\n      </ReactTooltip>\n\n      <p>make a wish! (or write wtv, im not forcing you to do anything)</p>\n      <p>its like writing with permanent marker on this page</p>\n      <input\n        onChange={event => setInput('name', event.target.value)}\n        style={styles.input}\n        value={formState.name} \n        placeholder=\"title\"\n      />\n      <input\n        onChange={event => setInput('description', event.target.value)}\n        style={styles.input}\n        value={formState.description}\n        placeholder=\"description\"\n      />\n      <button style={styles.button} onClick={addTodo}>wish!</button>\n      {\n        todos.map((todo, index) => (\n          <div key={todo.id ? todo.id : index} style={{backgroundColor: randomColor(50), marginTop: 100, marginBottom: 100}}>\n            <a style={styles.todoName}>{todo.name}</a>\n            <a style={styles.todoDescription}>{todo.description}</a>\n          </div>\n        ))\n      }\n    </div>\n  )\n}\n\nfunction randomColor(brightness){\n  function randomChannel(brightness){\n    var r = 255-brightness;\n    var n = 0|((Math.random() * r) + brightness);\n    var s = n.toString(16);\n    return (s.length==1) ? '0'+s : s;\n  }\n  return '#' + randomChannel(brightness) + randomChannel(brightness) + randomChannel(brightness);\n}\n\nconst styles = {\n  container: { width: 400, margin: '0 auto', display: 'flex', flex: 1, flexDirection: 'column', justifyContent: 'center', padding: 20 },\n  input: { fontFamily: 'Space Mono', border: 'none', backgroundColor: '#ddd', marginBottom: 10, padding: 8, fontSize: 18 },\n  todoName: { marginLeft: 15, height: 100, fontSize: 20, fontWeight: 'bold', },\n  todoDescription: { height: 200,},\n  button: { fontFamily: 'Space Mono', backgroundColor: 'black', color: 'white', outline: 'none', fontSize: 18, padding: '12px 0px' }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Amplify from \"aws-amplify\";\nimport awsExports from \"./aws-exports\";\nAmplify.configure(awsExports);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}